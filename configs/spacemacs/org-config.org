#+PROPERTY: header-args :tangle yes
* general settings
Settings that affect the layout and behavior of all org files.

I don't keep my org files in one place; they are spread throughout my system.
Therefore I do not bother to set ~org-directory~, as in my case there is no
reasonable value for this variable. However, there are two directories where the
majority of my org files are located, so here I define variables for those
directories for convenience.
#+BEGIN_SRC emacs-lisp
  (defvar du/gtd-directory "~/s/doc/gtd")
  (defvar du/pkb-directory "~/s/doc/kb")
#+END_SRC

Don't insert a CLOSED timestamp when I complete a task.
#+BEGIN_SRC emacs-lisp
  (setq org-log-done nil)
#+END_SRC

Log habits to the "LOGBOOK" drawer
#+BEGIN_SRC emacs-lisp
  (setq org-log-into-drawer "LOGBOOK")
#+END_SRC

Prevent org files from opening to random sections when I open them.
#+BEGIN_SRC emacs-lisp
  (setq org-startup-folded t)
#+END_SRC

Move the tags column more to the right.
#+BEGIN_SRC emacs-lisp
  (setq org-tags-column -100)
#+END_SRC

Increase visibility of entries which are jumped to from the agenda view.
#+BEGIN_SRC emacs-lisp
  (setq org-show-context-detail
        '((agenda . lineage)
          (bookmark-jump . lineage)
          (isearch . lineage)
          (default . ancestors)))
#+END_SRC

Hide text markup delimiters
#+BEGIN_SRC emacs-lisp
  (setq org-hide-emphasis-markers t)
#+END_SRC

This setting allows me to navigate org-files a little bit more easily by
changing the behavior of ~C-a~ and ~C-e~ in org-mode. At least that's what it's
supposed to do, but because of spacemacs customizations to org-mode, this
setting actually affects the evil-org keybindings ~^~ and ~$~. See the spacemacs
org layer docs and [[https://emacs.stackexchange.com/questions/17502/how-to-navigate-most-efficiently-to-the-start-or-end-of-the-main-text-of-an-org][this stack overflow post]] for more.
#+BEGIN_SRC emacs-lisp
  (setq-default org-special-ctrl-a/e t)
#+END_SRC
** indentation
Indent subheadings and sublists by two spaces.
#+BEGIN_SRC emacs-lisp
  (setq
   org-indent-indentation-per-level 2
   org-list-indent-offset 2)
#+END_SRC

Manually enable org-indent-mode because it [[https://github.com/syl20bnr/spacemacs/issues/2732][isn't a spacemacs default]] right now.
#+BEGIN_SRC emacs-lisp
  (setq org-startup-indented t)
#+END_SRC
** priorities
Priorities are in the range "A" to "E", with the default being "D".
#+BEGIN_SRC emacs-lisp
  (setq
   org-lowest-priority 69
   org-default-priority 68)
#+END_SRC
** links
Keep ~.org-id-locations~ somewhere where it can access both my gtd and pkb files.
#+BEGIN_SRC emacs-lisp
  (setq-default org-id-locations-file "~/s/doc/.org-id-locations")
#+END_SRC

This custom function updates all org-id references in my gtd and pkb.
#+BEGIN_SRC emacs-lisp
  (defun du/update-org-id-locations ()
    "runs org-id-update-id-locations on all org files in pkb-directory"
    (interactive)
    (org-id-update-id-locations (append
                                 (sa-find-org-file-recursively du/pkb-directory)
                                 (sa-find-org-file-recursively du/pkb-directory))))
#+END_SRC

We bind it to an easily-accessible key chord and run it when this file is
loaded (i.e. when emacs starts).
#+BEGIN_SRC emacs-lisp
  (spacemacs/set-leader-keys "ou" 'du/update-org-id-locations)
  ;;(du/update-org-id-locations)
#+END_SRC
** attachments
#+BEGIN_SRC emacs-lisp
  (setq
    org-attach-directory "media/"
    org-download-method 'attach)
#+END_SRC
* todo keywords
TODO items are those that I plan to start in the near future
NEXT means this todo item is the next sub-task in an active project
WAITING means I started the task but am waiting for some external event
    to happen before I can complete it (I log what I'm waiting for)
HOLD means the task is on hold for now (I make sure to log the reason why)
STUCK means I started the task but got stuck (not due to an external event
    beyond my control). Usually this means I am unsure of how to proceed (I log
    what I'm stuck on)
CANCELLED means I never completed the task and I no longer intend to (I log why
    I cancelled it)
DONE means done
#+BEGIN_SRC emacs-lisp
  (setq-default
    org-todo-keywords '((sequence "TODO(t!)" "NEXT(n!)" "|" "WAITING(w@)" "HOLD(h@)" "STUCK(s@)" "CANCELLED(x@)" "DONE(d!)"))
    org-todo-keyword-faces
    '(("WAITING" . (:foreground "#b58900" :weight bold))
      ("HOLD" . (:foreground "#dc322f" :weight bold))
      ("NEXT" . (:foreground "#cb4b16" :weight bold))
      ("CANCELLED" . (:foreground "#dc322f" :weight bold))
      ("STUCK" . (:foreground "#6c71c4" :weight bold))))
#+END_SRC
* agenda
The function ~sa-find-file-recursively~ was taken from [[https://stackoverflow.com/questions/11384516/how-to-make-all-org-files-under-a-folder-added-in-agenda-list-automatically#11384907][this stack overflow post]].
#+BEGIN_SRC emacs-lisp
  (defun sa-find-org-file-recursively (&optional directory filext)
    "Return .org and .org_archive files recursively from DIRECTORY.
      If FILEXT is provided, return files with extension FILEXT instead."
    (interactive "DDirectory: ")
    (let* (org-file-list (case-fold-search t) ; filesystems are case sensitive
                         (file-name-regex "^[^.#].*") ; exclude dot, autosave, and backup files

                         (filext (or filext "org$\\\|org_archive"))
                         (fileregex (format "%s\\.\\(%s$\\)" file-name-regex filext))
                         (cur-dir-list (directory-files directory t file-name-regex)))
      ;; loop over directory listing

      (dolist (file-or-dir cur-dir-list org-file-list) ; returns org-file-list
        (cond
         ((file-regular-p file-or-dir) ; regular files
          (if (string-match fileregex file-or-dir) ; org files
              (add-to-list 'org-file-list file-or-dir)))
         ((file-directory-p file-or-dir)
          (dolist (org-file (sa-find-org-file-recursively file-or-dir
                                                          filext)
                            org-file-list) ; add files found to result
            (add-to-list 'org-file-list org-file)))))))

  (setq-default
   ;; files that appear in the agenda
   org-agenda-files (list (concat du/gtd-directory "/current.org")
                          (concat du/gtd-directory "/areas+goals.org")
                          (concat du/gtd-directory "/repeat.org")
                          (concat du/gtd-directory "/tickler.org"))
   ;; files that are candidates for searches in addition to agenda files
   org-agenda-text-search-extra-files
    (append
      (sa-find-org-file-recursively (concat du/gtd-directory "/archives"))
      (list (concat du/gtd-directory "/notnow.org")))
   ;; Make the tags not squished to the left in the agenda
   ;; Here they are right-aligned to column 100
   org-agenda-tags-column -100
   org-deadline-warning-days 1
   org-agenda-custom-commands
    '(("d" "David's planner view"
       ((agenda "")
        (tags-todo "task-@work-SCHEDULED={.+}|project-@work+TODO=\"NEXT\"-SCHEDULED={.+}"
                   ((org-agenda-overriding-header "Unscheduled Tasks and Next Actions")
                    ;;(org-agenda-skip-function 'du/skip-projects-subprojects)
                    (org-agenda-remove-tags t)))
        (tags-todo "task+@work-SCHEDULED={.+}|project+@work+TODO=\"NEXT\"-SCHEDULED={.+}"
                   ((org-agenda-overriding-header "Unscheduled Work Tasks and Next Actions")
                    (org-agenda-remove-tags t)))
        (tags-todo "project"
              ((org-agenda-overriding-header "Stuck Projects")
               (org-agenda-skip-function 'dru/keep-stuck-projects)
               (org-tags-match-list-sublevels nil)
               (org-agenda-remove-tags t)))))
      ("g" "Goals"
       ((tags "goal_short+GOAL=\"t\""
              ((org-agenda-overriding-header "Short-term Goals")))
        (tags "goal_medium+GOAL=\"t\""
              ((org-agenda-overriding-header "Medium-term Goals")))
        (tags "goal_long+GOAL=\"t\""
              ((org-agenda-overriding-header "Long-term Goals")))
        (tags "goal_dream+GOAL=\"t\""
              ((org-agenda-overriding-header "Dreams")))))))

  (setq org-agenda-prefix-format
        `((agenda . "%?t")
          (todo . " %i %-12:c")
          (tags . " %i %-12:c")
          (search . " %i %-12:c")))
#+END_SRC
* refile
I use refile extensively.
#+BEGIN_SRC emacs-lisp
  ;; set an easy keybinding for refile
  (spacemacs/set-leader-keys-for-major-mode 'org-mode "r" 'org-refile)
  (setq-default
   org-refile-targets '(("current.org" :maxlevel . 9)
                        ("notnow.org" :maxlevel . 9)
                        ("someday+maybe.org" :maxlevel . 9)
                        ("repeat.org" :maxlevel . 9)
                        ("tickler.org" :maxlevel . 9))
   org-outline-path-complete-in-steps t ;; Refile in a single go
   org-refile-use-outline-path 'file ;; Show full paths for refiling
   )
#+END_SRC
* capture
#+BEGIN_SRC emacs-lisp
    (defvar du/rwl-file-path (concat du/pkb-directory "/2_areas/Indiv-Self_Change/rwl.org"))
    (setq
      org-default-notes-file (concat du/pkb-directory "/0 Inbox/INBOX.org")
      org-capture-templates
      ;; most-used templates
      `(("t" "TODO" entry (file+headline ,(concat du/gtd-directory "/current.org") "tasks")
          "* TODO %?\n" :empty-lines 1)
        ("T" "TODO from clipboard" entry (file+headline ,(concat du/gtd-directory "/current.org") "tasks")
          "* TODO %c\n%?" :empty-lines 1)
        ; ("f" "thought" entry (file+headline ,(concat du/gtd-directory "/current.org") "thoughts")
        ;   "* %?\n%u\n" :empty-lines 1)
        ; ("F" "thought from clipboard" entry (file+headline ,(concat du/gtd-directory "/current.org") "thoughts")
        ;   "* %?\n%u\n%c" :empty-lines 1)
        ("n" "note" entry (file ,(concat du/pkb-directory "/0 Inbox/INBOX.org"))
          "* %?\n%u\n" :empty-lines 1)
        ("N" "note from clipboard" entry (file ,(concat du/pkb-directory "/0 Inbox/INBOX.org"))
          "* %?\n%u\n%c" :empty-lines 1)
        ("d" "dump" entry (file ,(concat du/pkb-directory "/0 Inbox/INBOX.org"))
          "* *[DUMP]* %?\n" :prepend t :empty-lines 1)
        ("p" "project" entry (file+headline ,(concat du/gtd-directory "/current.org") "projects")
          "* TODO %? [/]" :empty-lines 1)
        ;; templates for rwl.org
        ("r" "stuff to read")
        ("rb" "book" entry (file+headline du/rwl-file-path "books")
          "* *%?* by \n" :prepend t :kill-buffer t)
        ("rp" "paper" item (file+headline 'du/rwl-file-path "papers")
          "- [ ] %?\n" :prepend t :kill-buffer t)
        ("w" "stuff to watch")
        ("wm" "movie" item (file+headline 'du/rwl-file-path "movies")
          "- [ ] %?\n" :prepend t :kill-buffer t)
        ("wt" "TV show" item (file+headline 'du/rwl-file-path "tv shows")
          "- [ ] %?\n" :prepend t :kill-buffer t)
        ("wa" "anime" item (file+headline 'du/rwl-file-path "anime")
          "- [ ] %?\n" :prepend t :kill-buffer t)
        ("wv" "video" item (file+headline 'du/rwl-file-path "videos")
          "- [ ] %?\n" :prepend t :kill-buffer t)
        ("l" "stuff to listen to")
        ("lm" "music")
        ("lmc" "check out" item (file+headline 'du/rwl-file-path "check out")
          "- [ ] %?\n" :prepend t :kill-buffer t)
        ("lmd" "download" item (file+headline 'du/rwl-file-path "download")
          "- [ ] %?\n" :prepend t :kill-buffer t)
        ("lp" "podcast" item (file+headline 'du/rwl-file-path "podcasts")
          "- [ ] %?\n" :prepend t :kill-buffer t)
        ;; misc template; goes to notes file
        ;; ("m" "Misc" plain (file "") "%?" :empty-lines 1)
        )
     )
    ;; start org-capture buffer in insert state
    (add-hook 'org-capture-mode-hook 'evil-insert-state)
#+END_SRC
* projects
** helper functions
taken from http://doc.norang.ca/org-mode.html#GTDWeeklyReview
#+BEGIN_SRC emacs-lisp
  (defun bh/is-project-p ()
    "Any task with a todo keyword subtask"
    (save-restriction
      (widen)
      (let ((has-subtask)
            (subtree-end (save-excursion (org-end-of-subtree t)))
            (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
      (save-excursion
        (forward-line 1)
        (while (and (not has-subtask)
                    (< (point) subtree-end)
                    (re-search-forward "^\*+ " subtree-end t))
          (when (member (org-get-todo-state) org-todo-keywords-1)
            (setq has-subtask t))))
      (and is-a-task has-subtask))))

  ;; note that this function is exactly the same as bh/is-project-p except for the
  ;; last line
  (defun bh/is-task-p ()
    "Any task with a todo keyword and no subtask"
    (save-restriction
      (widen)
      (let
        ((has-subtask)
         (subtree-end (save-excursion (org-end-of-subtree t)))
         (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
        (save-excursion
          (forward-line 1)
          (while (and (not has-subtask)
                      (< (point) subtree-end)
                      (re-search-forward "^\*+ " subtree-end t))
            (when (member (org-get-todo-state) org-todo-keywords-1)
              (setq has-subtask t))))
        (and is-a-task (not has-subtask)))))

  (defun bh/find-project-task ()
    "Move point to the parent (project) task if any"
    (save-restriction
      (widen)
      (let
        ((parent-task
          (save-excursion
           (org-back-to-heading 'invisible-ok)
           (point))))
        (while (org-up-heading-safe)
          (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
            (setq parent-task (point))))
        (goto-char parent-task)
        parent-task)))

  (defun bh/is-project-subtree-p ()
    "Any task with a todo keyword that is in a project subtree.
  Callers of this function already widen the buffer view."
    (let ((task (save-excursion
                  (org-back-to-heading 'invisible-ok)
                  (point))))
      (save-excursion
        (bh/find-project-task)
        (if (equal (point) task)
            nil
          t))))

  ;; any TODO keyword that is a child of another TODO keyword. So for the purposes
  ;; of this function, leaf nodes are also subprojects
  (defun bh/is-subproject-p ()
    "Any task which is a subtask of another project"
    (let ((is-subproject)
          (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
      (save-excursion
        (while (and (not is-subproject)
                    (org-up-heading-safe))
          (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
            (setq is-subproject t))))
      (and is-a-task is-subproject)))

  (defun bh/skip-non-projects ()
    "Skip trees that are not projects"
    ;; (bh/list-sublevels-for-projects-indented)
    (if (save-excursion (bh/skip-non-stuck-projects))
        (save-restriction
          (widen)
          (let
            ((subtree-end (save-excursion (org-end-of-subtree t))))
            (cond
             ((bh/is-project-p) nil)
             ((and (bh/is-project-subtree-p)
                   (not (bh/is-task-p))) nil)
             (t subtree-end))))
        (save-excursion
          (org-end-of-subtree t))))

  ;; NOTE these two functions are exactly the same except for one line
  (defun dru/keep-stuck-projects ()
    "Skip trees that are not stuck projects (i.e. only keep stuck projects)"
    (save-restriction
      (widen)
      (let
          ((next-headline
            (save-excursion
              (or (outline-next-heading)
                  (point-max)))))
        (if (bh/is-project-p)
            (let*
                ((subtree-end
                  (save-excursion
                    (org-end-of-subtree t)))
                 (has-next))
              (save-excursion
                (forward-line 1)
                (while (and (not has-next)
                            (< (point) subtree-end)
                            (re-search-forward "^\\*+ NEXT " subtree-end t))
                  (unless (member "WAITING" (org-get-tags-at))
                    (setq has-next t))))
              (if has-next next-headline nil)) ; a stuck project, has subtasks but no next task
          next-headline))))

  (defun dru/keep-non-stuck-projects ()
    "Skip trees that are not ongoing projects (i.e. only keep ongoing projects)"
    (save-restriction
      (widen)
      (let
          ((next-headline
            (save-excursion
              (or (outline-next-heading)
                  (point-max)))))
        (if (bh/is-project-p)
            (let*
                ((subtree-end
                  (save-excursion
                    (org-end-of-subtree t)))
                 (has-next))
              (save-excursion
                (forward-line 1)
                (while (and (not has-next)
                            (< (point) subtree-end)
                            (re-search-forward "^\\*+ NEXT " subtree-end t))
                  (unless (member "WAITING" (org-get-tags-at))
                    (setq has-next t))))
              (if has-next nil next-headline))
          next-headline))))

  (defun du/skip-projects-subprojects ()
    "Skip trees that are projects or subprojects"
    (save-restriction
      (widen)
      (let ((next-headline
             (save-excursion (or (outline-next-heading) (point-max)))))
        (if (or (bh/is-project-p) (bh/is-subproject-p)) next-headline nil))))

#+END_SRC
** project definitions
Current disabled because I'm not using it, but might be useful for testing new
project definition later.
#+BEGIN_SRC emacs-lisp :tangle no
  (defun dru/is-project ()
    "Print a message indicating whether the heading under point is a project"
    (interactive)
    (if (bh/is-project-p)
        (message "project")
      (message "nope")))

  (define-key org-mode-map (kbd "C-c C-m") 'dru/is-project)
#+END_SRC
* keybindings
Add an easy keybinding for setting TODO keywords.
#+BEGIN_SRC emacs-lisp
  (spacemacs/set-leader-keys-for-major-mode 'org-mode "w" 'org-todo)
#+END_SRC

Make the org-mode ", c" binding ~ox-clip-formatted-copy~. By default this is
~org-capture~, but I already have a key for that.
#+BEGIN_SRC emacs-lisp
  (spacemacs/set-leader-keys-for-major-mode 'org-mode "c" 'ox-clip-formatted-copy)
#+END_SRC

These keybindings do the same thing as the default ~C-ret~ and ~M-ret~
keybindings, except they also automatically enter evil-insert-state.
#+BEGIN_SRC emacs-lisp
  (define-key org-mode-map (kbd "C-<return>") (lambda ()
                                                (interactive)
                                                (org-insert-heading-respect-content)
                                                (evil-insert 1)))
  (define-key org-mode-map (kbd "M-<return>") (lambda ()
                                                (interactive)
                                                (org-meta-return)
                                                (evil-insert 1)))
#+END_SRC

Keybindings to automatically show multiple levels of content.
#+BEGIN_SRC emacs-lisp
  (defun du/org-show-2-levels ()
    (interactive)
    (outline-show-children 2))

  (defun du/org-show-3-levels ()
    (interactive)
    (outline-show-children 3))

  (spacemacs/set-leader-keys-for-major-mode 'org-mode "2" 'du/org-show-2-levels)
  (spacemacs/set-leader-keys-for-major-mode 'org-mode "3" 'du/org-show-3-levels)
#+END_SRC

A better RET key for org-mode, from [[https://gist.github.com/alphapapa/61c1015f7d1f0d446bc7fd652b7ec4fe][here]].
#+BEGIN_SRC emacs-lisp
  (defun ap/org-return (&optional ignore)
    "Add new list item, heading or table row with RET.
  A double return on an empty element deletes it. Use a prefix arg 
  to get regular RET. "
    ;; See https://gist.github.com/alphapapa/61c1015f7d1f0d446bc7fd652b7ec4fe and
    ;; http://kitchingroup.cheme.cmu.edu/blog/2017/04/09/A-better-return-in-org-mode/
    (interactive "P")
    (if ignore
        (org-return)
      (cond ((eq 'link (car (org-element-context)))
             ;; Open links like usual
             (org-open-at-point-global))
            ((and (fboundp 'org-inlinetask-in-task-p) (org-inlinetask-in-task-p))
             ;; It doesn't make sense to add headings in inline tasks. Thanks Anders
             ;; Johansson!
             (org-return))
            ((org-at-item-checkbox-p)
             ;; Add checkboxes
             (org-insert-todo-heading nil))
            ((and (org-in-item-p) (not (bolp)))
             ;; Lists end with two blank lines, so we need to make sure we are also not
             ;; at the beginning of a line to avoid a loop where a new entry gets
             ;; created with only one blank line.
             (if (org-element-property :contents-begin (org-element-context))
                 (org-insert-heading)
               (beginning-of-line)
               (delete-region (line-beginning-position) (line-end-position))
               (org-return)))
            ((org-at-heading-p)
             (if (s-present? (org-element-property :title (org-element-context)))
                 (progn
                   (org-end-of-meta-data)
                   (org-insert-heading))
               (beginning-of-line)
               (delete-region (line-beginning-position) (line-end-position))))
            ((org-at-table-p)
             (if (--any? (string-empty-p it)
                         (nth (- (org-table-current-dline) 1) (org-table-to-lisp)))
                 (org-return)
               ;; Empty row
               (beginning-of-line)
               (delete-region (line-beginning-position) (line-end-position))
               (org-return)))
            (t
             (org-return)))))

  ;; (define-key org-mode-map (kbd "RET")   'ap/org-return)
#+END_SRC

Automatically git commit after weekly planning and daily adapting.
#+BEGIN_SRC emacs-lisp
  (defun du/org-auto-vc (message)
    "Automatically adds and commits all org files.
     'message' arg is the commit message. A timestamp will be automatically
     added after this message."
    (shell-command
      (concat
        "cd "
        du/gtd-directory
        " && git commit -am '"
        message
        " "
        (format-time-string "%a %D")
        "'"))
    (shell-command
      (concat
        "cd "
        du/pkb-directory
        " && git commit -am 'auto-commit "
        (format-time-string "%a %D")
        "'")))

  (defun du/org-auto-vc-daily ()
    "Automatically git commit all org files after daily adapting"
    (interactive)
    (du/org-auto-vc "Daily adapting"))

  (defun du/org-auto-vc-weekly ()
    "Automatically git commit all org files after weekly planning"
    (interactive)
    (du/org-auto-vc "Weekly planning"))

  (spacemacs/set-leader-keys-for-major-mode 'org-mode "vd" 'du/org-auto-vc-daily)
  (spacemacs/set-leader-keys-for-major-mode 'org-mode "vw" 'du/org-auto-vc-weekly)
  (spacemacs/declare-prefix-for-mode 'org-mode "mv" "commit")
#+END_SRC

Bind the useful ~org-reveal~ function to a better key than ~C-c C-r~.
#+BEGIN_SRC emacs-lisp
  (spacemacs/set-leader-keys-for-major-mode 'org-mode "R" 'org-reveal)
#+END_SRC

Search in PKB
#+BEGIN_SRC emacs-lisp
  (defun du/search-in-pkb ()
    "search in PKB using ag"
    (interactive)
    (spacemacs/helm-files-do-ag du/pkb-directory))

  (spacemacs/set-leader-keys "os" 'du/search-in-pkb)
#+END_SRC
** gtd functions
These functions open buffers (not associated with any file) with a checklist for
daily, weekly, or monthly GTD habits. They are bound to the SPC o g prefix.
#+BEGIN_SRC emacs-lisp
  (defun du/open-gtd-buffer (bufname snippet-name)
    (spacemacs/new-empty-buffer)
    (rename-buffer (generate-new-buffer-name bufname))
    (org-mode)
    (yas-expand-snippet (yas-lookup-snippet snippet-name)))

  (defun du/gtd-monthly-rotation ()
    (interactive)
    (du/open-gtd-buffer "gtd-monthly" "GTD monthly rotation checklist"))

  (defun du/gtd-weekly-planning ()
    (interactive)
    (du/open-gtd-buffer "gtd-weekly" "GTD weekly planning checklist"))

  (defun du/gtd-daily-adapting ()
    (interactive)
    (du/open-gtd-buffer "gtd-daily" "GTD daily adapting checklist"))

  (defun du/rh-morning-checklist ()
    (interactive)
    (du/open-gtd-buffer "morning-checklist" "Redhat morning checklist"))

  (defun du/rh-friday-checklist ()
    (interactive)
    (du/open-gtd-buffer "friday-checklist" "Redhat friday afternoon checklist"))

  (spacemacs/set-leader-keys "ogm" 'du/gtd-monthly-rotation)
  (spacemacs/set-leader-keys "ogw" 'du/gtd-weekly-planning)
  (spacemacs/set-leader-keys "ogd" 'du/gtd-daily-adapting)

  ;; redhat specific
  (spacemacs/set-leader-keys "ogm" 'du/rh-morning-checklist)
  (spacemacs/set-leader-keys "ogf" 'du/rh-friday-checklist)

  (spacemacs/declare-prefix "og" "GTD")
#+END_SRC
* encryption
Note: ~epa-file~ is already required by spacemacs
#+BEGIN_SRC emacs-lisp
  (require 'org-crypt)
  (org-crypt-use-before-save-magic)
  (setq org-tags-exclude-from-inheritance (quote ("crypt")))
  (setq org-crypt-key "david@davidudelson.com")
#+END_SRC
* other useful tidbits
** easy linking by id
I use the "id" property to link between org files. This function automatically
creates an id for a heading if one doesn't already exist and copies the id to
the clipboard.
#+BEGIN_SRC emacs-lisp
  (defun du/org-id-create-and-copy ()
    (interactive)
    (org-id-get-create)
    (org-id-copy))
  (define-key org-mode-map (kbd "C-l") 'du/org-id-create-and-copy)
#+END_SRC
** function that creates weekly plans heading
I use this in my weekly plans heading template.
#+BEGIN_SRC emacs-lisp
  (defun du/generate-weekly-plans-heading ()
    (let* ((cmd "import time; print(time.strftime('%%m/%%d', time.strptime('%s %s %s', '%%Y %%W %%w')), end='')")
           (year (format-time-string "%Y"))
           (week-num (format-time-string "%W"))
           (week-begin (python-shell-internal-send-string (format cmd year week-num "1")))
           (week-end (python-shell-internal-send-string (format cmd year week-num "0"))))
       (format "* W%s (%s - %s)" week-num week-begin week-end)))
#+END_SRC
** function that jumps between goals and projects/habits
#+BEGIN_SRC emacs-lisp
  (defun du/org-jump-to-goal-or-action ()
    "Jumps to the action (habit or project) for the goal represented by the heading
     currently under point or vice versa based on the CUSTOM_ID contained in
     either the GOAL_ACTION property (for goals) or the ACTION_GOAL property (for
     habits and projects)."
    (interactive)
    (let ((goal-action-id (org-entry-get (point) "GOAL_ACTION"))
          (action-goal-id (org-entry-get (point) "ACTION_GOAL")))
      (if goal-action-id
          (org-open-link-from-string (format "[[id:%s]]" goal-action-id))
        (if action-goal-id
            (org-open-link-from-string (format "[[id:%s]]" action-goal-id))
          (message "no value")))))

  (define-key org-mode-map (kbd "C-c C-j") 'du/org-jump-to-goal-or-action)
#+END_SRC
* temporary fixes
Fixes [[https://github.com/syl20bnr/spacemacs/issues/9950][this bug]] that screws up org-mode todo keyword highlight colors.
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook (lambda () (hl-todo-mode -1)))
#+END_SRC
* [disabled] habits
*currently disabled because there were a lot of problems with org-habits*
I'm using an app on my phone to track habits for the time being.

I use the ~org-habit~ module to track my habits. It's not enabled by default, so
I have to enable it and set it up manually.
#+BEGIN_SRC emacs-lisp :tangle no
  (setq-default 
   ;; enable org-mode habit tracking
   org-modules (append org-modules '(org-habit))
   ;; on the habit-tracking graph in the agenda,
   ;; show 1 month (30 days) of previous progress and 1 day of future progress
   org-habit-preceding-days 30
   org-habit-following-days 1
   ;; move the habit-tracking graph to the right so that it doesn't cut off the
   ;; habit name
   org-habit-graph-column 80
   ;; do not show the habits in the calendar!
   org-habit-show-habits nil)
#+END_SRC
** display habits in special agenda block instead of schedule
I like the habit-tracking graphs that appear in the agenda schedule by default,
but I don't use the agenda schedule (see [[agenda]]), so this code displays the
habit-tracking graphs in their own agenda block instead.
#+BEGIN_SRC emacs-lisp :tangle no
  (defvar my/org-habit-show-graphs-everywhere t
    "If non-nil, show habit graphs in all types of agenda buffers.

    Normally, habits display consistency graphs only in
    \"agenda\"-type agenda buffers, not in other types of agenda
    buffers.  Set this variable to any non-nil variable to show
    consistency graphs in all Org mode agendas.")

  (defun my/org-agenda-mark-habits ()
    "Mark all habits in current agenda for graph display.

    This function enforces `my/org-habit-show-graphs-everywhere' by
    marking all habits in the current agenda as such.  When run just
    before `org-agenda-finalize' (such as by advice; unfortunately,
    `org-agenda-finalize-hook' is run too late), this has the effect
    of displaying consistency graphs for these habits.

    When `my/org-habit-show-graphs-everywhere' is nil, this function
    has no effect."
    (when (and my/org-habit-show-graphs-everywhere
               (not (get-text-property (point)
                                       'org-series)))
      (let ((cursor (point)) item
            data)
        (while (setq cursor (next-single-property-change cursor 'org-marker))
          (setq item (get-text-property cursor 'org-marker))
          (when (and item
                     (org-is-habit-p item))
            (with-current-buffer (marker-buffer item)
              (setq data (org-habit-parse-todo item)))
            (put-text-property cursor
                               (next-single-property-change cursor 'org-marker)
                               'org-habit-p
                               data))))))

  (advice-add #'org-agenda-finalize :before #'my/org-agenda-mark-habits)
#+END_SRC
* [disabled] calendar
*currently disabled because there are problems with calfw*
I'm using google calendar for the time being.

I use the [[https://github.com/kiwanami/emacs-calfw][calfw]] package for my calendar in place of the built-in agenda
schedule, because it actually looks like a calendar, which I really like. I use
[[https://github.com/kiwanami/emacs-calfw][org-gcal]] to sync this with google calendar, which is synced with an app on my phone.
#+BEGIN_SRC emacs-lisp :tangle no
  ;; org-gcal settings are in emacs.secrets
  (setq-default
    org-gcal-client-id my-org-gcal-client-id
    org-gcal-client-secret my-org-gcal-client-secret
    org-gcal-file-alist `((,my-org-gcal-email . ,(concat du/gtd-directory "/cal.org"))))

  (defun du/org-cal-transformer (s)
    "test"
    s)

  ;; calfw-org settings
  (setq-default
   cfw:org-schedule-summary-transformer 'dudelson/org-cal-transformer)
#+END_SRC
